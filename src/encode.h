#include <stdio.h>

#define DA_LIB_IMPLEMENTATION
#include "da.h"

// Type definition of an output of the compression algorithm
typedef struct {
  // Amount of time we have to go back in the stream from the actual element to the start of the match
  int B; 

  // Amount of character to copy from the starting point of the match
  int L;
         
  // Explicit character
  char C; 
} LZ77e_output;

// Type definition of the used window
// sbl  -> amount of char behind the current pointer we are serching for
// labl -> amount of char in front of the current pointer we are looking at
typedef struct {
  // Search buffer len
  int sbl;

  // Lookahead buffer len
  int labl;
} LZ77e_window;

// Dynamic array containing all the outputs generated by the compression algorithm
typedef struct {
  LZ77e_output* items;
  size_t count;
  size_t capacity;
} LZ77e_outputs;

// Typdef of the complete algorith encoder
typedef struct {
  char* input;

  char* input_start;

  LZ77e_outputs output; 
  LZ77e_window window;

} LZ77_encoder;

static inline LZ77e_outputs* LZ77_encode(LZ77_encoder* encoder);
static inline int LZ77e_write_outputs(LZ77_encoder* encoder);
static inline int get_first_sb_cp(LZ77_encoder* encoder, char* cp); 
static inline int get_last_la_cp(LZ77_encoder* encoder, char *cp);

static inline int LZ77e_write_outputs(LZ77_encoder* encoder) 
{
  FILE* f;
  f = fopen("sample.lz77", "w");
  if(f == NULL) {
    puts("[ERROR] - can't open .lz77 file");
    return 1;
  }

  da_foreach(LZ77e_output, it, &(encoder->output)) {
    fprintf(f, "(%d,%d)%c\n", it->B, it->L, it->C);
  }

  fclose(f);
  return 0;
}

static inline int get_last_la_cp(LZ77_encoder* encoder, char *cp) 
{
  int inc = 0;
  char* m = cp;
  while(*m != '\0' && inc < encoder->window.labl) {
    inc++;
    m++; 
  }
  
  inc++;

  return inc;
}

static inline int get_first_sb_cp(LZ77_encoder* encoder, char* cp) 
{
  int dec = 0;
  char* l = cp;
  while(l > encoder->input_start && dec < encoder->window.sbl) {
    l--;
    dec++;
  }
  
  return dec;
}

static inline LZ77e_outputs* LZ77_encode(LZ77_encoder* encoder) 
{
  char *cp = encoder->input;

  while(*cp != '\0') {
    int w_sb_max_size  = get_first_sb_cp(encoder, cp);
    int w_la_max_size = get_last_la_cp(encoder, cp);

    char* first = cp - w_sb_max_size;
    char* last = cp + w_la_max_size;
    char* lookahead = cp;

    int B = w_sb_max_size, L = 0;
    int max_L = 0;

    while(first != cp) {
      while(*lookahead == *first && first != cp && lookahead <= last) {
        L++;
        lookahead++;
        first++; 
      }
      max_L = L > max_L ? L : max_L;
      if(first != cp && lookahead < last) {
        B -= L == 0 ? 1 : L;   
        lookahead -= L;
        first += L == 0 ? 1 : 0;
        L = 0;
      }
    }

    if(*lookahead == '\0')
      *lookahead = '-';
    LZ77e_output el = (LZ77e_output) {.B = B, .L = max_L, .C = *lookahead};
    cp += max_L + 1;
    da_append(&(encoder->output), el);
  }
  
  return &(encoder->output);
}
